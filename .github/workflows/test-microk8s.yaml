name: MicroK8s Test

on:
  - push
  - pull_request

jobs:
  actions:
    name: Github Actions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        juju: [2.8/stable, latest/candidate]
        microk8s: [1.18/stable, 1.18/edge]
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - uses: balchua/microk8s-actions@v0.2.2
      with:
        channel: '${{ matrix.microk8s }}'

    - name: Install test dependencies
      run: |
        set -eux
        for snap in charm juju-helpers juju-wait; do
            sudo snap install $snap --classic
        done
        sudo snap install juju --classic --channel ${{ matrix.juju }}
        sudo apt update
        sudo apt install -y libssl-dev python3-setuptools
        sudo pip3 install -r requirements.txt -r test-requirements.txt
        sudo usermod -a -G microk8s $USER

    - name: Deploy Kubeflow
      run: |
        sg microk8s <<EOF
          set -eux
          git clone git://git.launchpad.net/canonical-osm
          cp -r canonical-osm/charms/interfaces/juju-relation-mysql mysql
          python3 ./scripts/cli.py microk8s setup --test-mode
          KUBEFLOW_AUTH_PASSWORD=foobar python3 ./scripts/cli.py --debug deploy-to uk8s --build --bundle edge
        EOF

    - name: Test Kubeflow
      run: |
        set -eux
        sg microk8s -c './tests/run.sh -m edge'
        # Disabled until we can switch to https://github.com/canonical/argo-operators
        # sudo snap restart microk8s
        # sg microk8s -c 'microk8s.status --wait-ready'
        # juju wait -wv
        # kubectl wait -nkubeflow --for=condition=available deployment --all --timeout=5m
        # sg microk8s -c './tests/run.sh -m edge'

    - name: Juju status
      run: juju status
      if: failure()

    - name: Juju status (YAML)
      run: juju status --format=yaml
      if: failure()

    - name: MicroK8s status
      run: sg microk8s -c 'microk8s status'
      if: failure()

    - name: kubectl get pods
      run: kubectl get pods -A
      if: failure()

    - name: kubectl describe pods
      run: kubectl describe pods -A
      if: failure()

    - name: Generate debug log
      run: juju debug-log --replay --no-tail > juju-debug-${{ strategy.job-index }}.log
      if: failure()

    - name: Upload debug log
      uses: actions/upload-artifact@v2
      with:
        name: juju-debug-actions
        path: juju-debug-${{ strategy.job-index }}.log
      if: failure()

    - name: Generate inspect tarball
      run: >
        sg microk8s <<EOF
          microk8s inspect | \
          grep -Po "Report tarball is at \K.+" | \
          xargs -I {} cp {} inspection-report-${{ strategy.job-index }}.tar.gz
        EOF
      if: failure()

    - name: Upload inspect tarball
      uses: actions/upload-artifact@v2
      with:
        name: inspection-reports-actions
        path: ./inspection-report-${{ strategy.job-index }}.tar.gz
      if: failure()

    - name: Generate kubectl describe
      run: |
        set -eux
        mkdir describe-${{ strategy.job-index  }}
        for resource in $(kubectl api-resources -o name | sort); do
            kubectl describe $resource -A > describe-${{ strategy.job-index }}/"$resource".describe || true
        done
      if: failure()

    - name: Upload kubectl describe
      uses: actions/upload-artifact@v2
      with:
        name: kubectl-describe-actions
        path: describe-${{ strategy.job-index }}/*.describe
      if: failure()

    - name: Generate kubeflow pod logs
      run: |
        set -eux
        mkdir stdout-${{ strategy.job-index }}
        for pod in $(kubectl get pods -nkubeflow -o custom-columns=:metadata.name --no-headers); do
            for container in $(kubectl get pods -nkubeflow -o jsonpath="{.spec.containers[*].name}" $pod); do
              kubectl logs -nkubeflow --timestamps $pod -c $container > stdout-${{ strategy.job-index }}/$pod-$container.log
            done
        done
      if: failure()

    - name: Upload kubeflow pod logs
      uses: actions/upload-artifact@v2
      with:
        name: kubectl-stdout-actions
        path: stdout-${{ strategy.job-index }}/*.log
      if: failure()

  # Runs tests on AWS that are too big for github actions
  # Tests that are small enough are above in `actions:`
  aws:
    name: AWS
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        juju: [2.8/stable]
        microk8s: [1.18/stable, 1.18/edge]
        bundle: [lite, full]
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo snap install juju --classic
        sudo snap install juju-wait --classic

    - name: Bootstrap onto AWS
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        set -eux
        juju autoload-credentials --client aws
        juju bootstrap aws/us-east-1 uk8saws --debug --show-log --config test-mode=true --model-default test-mode=true
        juju deploy ubuntu --constraints 'cores=8 mem=16G root-disk=80G'
        juju wait -vw
        juju status
        juju status --format yaml

    - name: Copy code to AWS instance
      run: |
        set -eux
        juju scp -- -r $(pwd)/ ubuntu/0:~/

    - name: Install test dependencies
      run: |
        juju ssh ubuntu/0 <<EOF
          set -eux
          for snap in charm juju-helpers juju-wait; do
              sudo snap install \$snap --classic
          done
          sudo snap install juju --classic --channel ${{ matrix.juju }}
          sudo snap install microk8s --classic --channel ${{ matrix.microk8s }}
          sudo apt update
          sudo apt install -y libssl-dev firefox-geckodriver
          cd bundle-kubeflow
          sudo pip3 install -r requirements.txt -r test-requirements.txt
          sudo usermod -a -G microk8s ubuntu
        EOF

    - name: Deploy Kubeflow
      run: |
        juju ssh ubuntu/0 <<EOF
          set -eux
          cd bundle-kubeflow
          git clone git://git.launchpad.net/canonical-osm
          cp -r canonical-osm/charms/interfaces/juju-relation-mysql mysql
          python3 ./scripts/cli.py microk8s setup --test-mode
          KUBEFLOW_AUTH_PASSWORD=foobar python3 ./scripts/cli.py --debug deploy-to uk8s --build --bundle ${{ matrix.bundle }}
        EOF

    - name: Test Kubeflow
      run: |
        juju ssh ubuntu/0 <<EOF
          set -eux
          cd bundle-kubeflow
          ./tests/run.sh -m ${{ matrix.bundle }}
        EOF

    - name: Juju status
      run: juju ssh ubuntu/0 sudo juju status
      if: failure()

    - name: Juju status (YAML)
      run: juju ssh ubuntu/0 sudo juju status --format=yaml
      if: failure()

    - name: MicroK8s status
      run: juju ssh ubuntu/0 sudo microk8s status
      if: failure()

    - name: MicroK8s get pods
      run: juju ssh ubuntu/0 sudo microk8s kubectl get pods -A
      if: failure()

    - name: MicroK8s describe pods
      run: juju ssh ubuntu/0 sudo microk8s kubectl describe pods -A
      if: failure()

    - name: Get selenium screenshots
      run: |
        set -eux
        juju ssh ubuntu/0 <<EOF
          set -eux
          tar -czvf selenium.tar.gz /tmp/selenium-*.png
        EOF
        juju scp ubuntu/0:selenium.tar.gz selenium-${{ strategy.job-index }}.tar.gz
      if: failure()

    - name: Upload selenium screenshots
      uses: actions/upload-artifact@v2
      with:
        name: selenium-screenshots
        path: selenium-${{ strategy.job-index }}.tar.gz
      if: failure()

    - name: Generate inspect tarball
      run: |
        set -eux
        juju ssh ubuntu/0 <<EOF
          set -eux
          sudo microk8s inspect | \
            grep -Po "Report tarball is at \K.+" | \
            sudo xargs -I {} mv {} inspection-report-${{ strategy.job-index }}.tar.gz
          sudo juju debug-log --replay --no-tail > ~/juju-debug.log
        EOF
        juju scp ubuntu/0:~/juju-debug.log juju-debug-${{ strategy.job-index }}.log
        juju scp ubuntu/0:~/inspection-report-${{ strategy.job-index }}.tar.gz .
      if: failure()

    - name: Upload debug logs
      uses: actions/upload-artifact@v2
      with:
        name: juju-debug-aws
        path: juju-debug-${{ strategy.job-index }}.log
      if: failure()

    - name: Upload inspect tarball
      uses: actions/upload-artifact@v2
      with:
        name: inspection-reports-aws
        path: ./inspection-report-${{ strategy.job-index }}.tar.gz
      if: failure()

    - name: Generate kubectl describe
      run: |
        set -eux
        juju ssh ubuntu/0 <<EOF
          set -eux
          mkdir describe-${{ strategy.job-index }}
          for resource in \$(sudo microk8s kubectl api-resources -o name | sort); do
            sudo microk8s kubectl describe \$resource -A > describe-${{ strategy.job-index }}/"\$resource".describe || true
          done
          tar -cvzf describe.tar.gz describe-${{ strategy.job-index }}/*.describe
        EOF
        juju scp ubuntu/0:~/describe.tar.gz describe-${{ strategy.job-index }}.tar.gz
      if: failure()

    - name: Upload kubectl describe
      uses: actions/upload-artifact@v2
      with:
        name: kubectl-describe-aws
        path: describe-${{ strategy.job-index }}.tar.gz
      if: failure()

    - name: Generate kubeflow pod logs
      run: |
        set -eux
        juju ssh ubuntu/0 <<EOF
          set -eux
          mkdir stdout-${{ strategy.job-index }}
          for namespace in admin kubeflow; do
              for pod in \$(microk8s kubectl get pods -n \$namespace -o custom-columns=:metadata.name --no-headers); do
                  for container in \$(microk8s kubectl get pods -n \$namespace -o jsonpath="{.spec.containers[*].name}" \$pod); do
                    microk8s kubectl logs -n \$namespace --timestamps \$pod -c \$container > stdout-${{ strategy.job-index }}/\$namespace-\$pod-\$container.log
                  done
              done
          done
          tar -cvzf stdout.tar.gz stdout-${{ strategy.job-index }}/*.log
        EOF
        juju scp ubuntu/0:~/stdout.tar.gz stdout-${{ strategy.job-index }}.tar.gz
      if: failure()

    - name: Upload kubeflow pod logs
      uses: actions/upload-artifact@v2
      with:
        name: kubectl-stdout-aws
        path: stdout-${{ strategy.job-index }}.tar.gz
      if: failure()

    - name: Destroy controller
      run: juju destroy-controller -y uk8saws --destroy-all-models --destroy-storage
      if: always()
