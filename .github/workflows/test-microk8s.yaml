name: MicroK8s Test

on:
  - push
  - pull_request

jobs:
  actions:
    name: Github Actions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        juju: [2.8/stable, edge]
        microk8s: [1.18]
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Install test dependencies
      run: |
        set -eux
        env | sort
        sudo snap install charm --classic
        sudo snap install jq
        sudo snap install juju --classic --channel ${{ matrix.juju }}
        sudo snap install juju-helpers --classic --edge
        sudo snap install juju-wait --classic
        sudo snap install kubectl --classic
        sudo snap install microk8s --classic --channel ${{ matrix.microk8s }}
        sudo snap install yq
        sudo apt update
        sudo apt install -y libssl-dev python3-setuptools
        sudo pip3 install pytest sh kfp requests pyyaml
        sudo usermod -a -G microk8s $USER

    - name: Deploy Kubeflow
      run: |
        set -eux
        git clone git://git.launchpad.net/canonical-osm
        cp -r canonical-osm/charms/interfaces/juju-relation-mysql mysql
        sudo python3 ./scripts/cli.py microk8s setup --test-mode 
        KUBEFLOW_AUTH_PASSWORD=foobar sudo -E python3 ./scripts/cli.py --debug deploy-to uk8s --build --bundle edge

    - name: Test Kubeflow
      run: |
        set -eux
        # The pods can sometimes stay in Pending for a little while longer,
        # so run the tests first that don't check pod states.
        sudo ./tests/run.sh -k 'not kubectl' -m edge
        sudo ./tests/run.sh -k 'kubectl' -m edge

    - name: Debug failures yaml
      run: sudo juju status --format yaml
      if: failure()

    - name: Debug failures
      run: |
        set -eux
        sudo juju status
        sudo microk8s status
        sudo microk8s kubectl get pods -A
        sudo ./tests/dump-pipeline-logs.sh
      if: failure()

    - name: Generate stdout logs
      run: sudo ./tests/dump-stdout.sh ${{ strategy.job-index }}
      if: failure()

    - name: Upload stdout logs
      uses: actions/upload-artifact@v2
      with:
        name: stdout-logs
        path: ${{ strategy.job-index }}/kubeflow-*.log
      if: failure()

    - name: Generate debug log
      run: sudo juju debug-log --replay --no-tail > juju-debug-${{ strategy.job-index }}.log
      if: failure()

    - name: Upload debug log
      uses: actions/upload-artifact@v2
      with:
        name: juju-debug
        path: juju-debug-${{ strategy.job-index }}.log
      if: failure()

    - name: Generate inspect tarball
      run: sudo microk8s inspect
      if: failure()

    - name: Upload inspect tarball
      uses: actions/upload-artifact@v2
      with:
        name: inspection-reports
        path: /var/snap/microk8s/*/inspection-report-*.tar.gz
      if: failure()
  # Runs tests on AWS that are too big for github actions
  # Tests that are small enough are above in `actions:`
  aws:
    name: AWS
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        juju: [2.8/stable, edge]
        microk8s: [1.18]
        bundle: [lite, full]
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo snap install juju --classic --channel 2.8/edge
        sudo snap install juju-wait --classic

    - name: Bootstrap onto AWS
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        set -eux
        /snap/bin/juju autoload-credentials --client aws
        /snap/bin/juju bootstrap aws/us-east-1 uk8saws --config test-mode=true --model-default test-mode=true
        /snap/bin/juju deploy ubuntu --constraints 'cores=4 mem=16G root-disk=60G'
        /snap/bin/juju wait -vw
        /snap/bin/juju status
        /snap/bin/juju status --format yaml

    - name: Copy code to AWS instance
      run: |
        set -eux
        /snap/bin/juju scp -- -r $(pwd)/ ubuntu/0:~/

    - name: Install test dependencies
      run: |
        /snap/bin/juju ssh ubuntu/0 <<EOF
          set -eux
          sudo snap install charm --classic
          sudo snap install jq
          sudo snap install juju --classic --channel ${{ matrix.juju }}
          sudo snap install juju-helpers --classic --edge
          sudo snap install juju-wait --classic
          sudo snap install kubectl --classic
          sudo snap install microk8s --classic --channel ${{ matrix.microk8s }}
          sudo snap install yq
          sudo apt update
          sudo apt install -y libssl-dev
          sudo pip3 install pytest sh kfp requests pyyaml
          sudo usermod -a -G microk8s ubuntu
        EOF

    - name: Deploy Kubeflow
      run: |
        /snap/bin/juju ssh ubuntu/0 <<EOF
          set -eux
          cd bundle-kubeflow
          git clone git://git.launchpad.net/canonical-osm
          cp -r canonical-osm/charms/interfaces/juju-relation-mysql mysql
          python3 ./scripts/cli.py microk8s setup --test-mode
          KUBEFLOW_AUTH_PASSWORD=foobar python3 ./scripts/cli.py --debug deploy-to uk8s --build --bundle ${{ matrix.bundle }}
        EOF

    - name: Test Kubeflow
      run: |
        /snap/bin/juju ssh ubuntu/0 <<EOF
          set -eux
          cd bundle-kubeflow
          # The pods can sometimes stay in Pending for a little while longer,
          # so run the tests first that don't check pod states.
          ./tests/run.sh -k 'not kubectl' -m ${{ matrix.bundle }}
          ./tests/run.sh -k 'kubectl' -m ${{ matrix.bundle }}
        EOF

    - name: Print failing logs
      run: |
        /snap/bin/juju ssh ubuntu/0 <<EOF
          set -eux
          sudo juju status
          sudo microk8s status
          sudo microk8s kubectl get pods -A
          cd bundle-kubeflow
          sudo ./tests/dump-pipeline-logs.sh
        EOF
      if: failure()

    - name: Generate inspect tarball
      run: |
        set -eux
        /snap/bin/juju ssh ubuntu/0 <<EOF
          set -eux
          sudo juju debug-log --replay --no-tail > ~/juju-debug.log
        EOF
        /snap/bin/juju scp ubuntu/0:~/juju-debug.log .
      if: failure()

    - name: Upload debug logs
      uses: actions/upload-artifact@v2
      with:
        name: logs
        path: juju-debug.log
      if: failure()

    - name: Destroy controller
      run: /snap/bin/juju destroy-controller -y uk8saws --destroy-all-models --destroy-storage
      if: always()
