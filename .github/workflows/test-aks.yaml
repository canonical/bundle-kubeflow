name: AKS Test

on:
  schedule:
    - cron: '0 23 * * WED'

jobs:
  actions:
    runs-on: ubuntu-20.04
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Install test dependencies
      run: |
        set -eux
        for snap in charmcraft charm juju-helpers juju-wait; do
            sudo snap install $snap --classic
        done
        sudo snap install juju --classic
        sudo snap install kubectl --classic
        sudo apt update
        sudo apt install -y libssl-dev python3-setuptools firefox-geckodriver
        sudo pip3 install -r requirements.txt -r test-requirements.txt


    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create AKS
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az aks create -g kubeflow-ci --name test-aks-$GITHUB_RUN_ID --generate-ssh-keys --service-principal ${{ secrets.AZURE_CLIENT_ID }} --client-secret ${{ secrets.AZURE_CLIENT_SECRET }}

    - name: Bootstrap AKS
      run: |
        juju add-k8s --client --aks --resource-group kubeflow-ci --cluster-name test-aks-$GITHUB_RUN_ID aks-cloud
        juju bootstrap aks-cloud aks-$GITHUB_RUN_ID

    - name: Deploy Kubeflow
      run: |
        set -eux
        git clone git://git.launchpad.net/canonical-osm
        cp -r canonical-osm/charms/interfaces/juju-relation-mysql mysql
        KUBEFLOW_AUTH_PASSWORD=foobar python3 ./scripts/cli.py --debug deploy-to aks-$GITHUB_RUN_ID --build

    - name: Test Kubeflow
      run: |
        set -eux
        ./tests/run.sh -m full
        exit 1

    - name: Juju status
      run: juju status
      if: failure()

    - name: Juju status (YAML)
      run: juju status --format=yaml
      if: failure()

    - name: AKS get pods
      run: kubectl get pods -A
      if: failure()

    - name: AKS describe pods
      run: kubectl describe pods -A
      if: failure()

    - name: Get selenium screenshots
      run: |
        set -eux
        tar -czvf selenium-${{ strategy.job-index }}.tar.gz /tmp/selenium-*.png
      if: failure()

    - name: Upload selenium screenshots
      uses: actions/upload-artifact@v2
      with:
        name: selenium-screenshots
        path: selenium-${{ strategy.job-index }}.tar.gz
      if: failure()

    - name: Upload debug logs
      uses: actions/upload-artifact@v2
      with:
        name: juju-debug-aks
        path: juju-debug-${{ strategy.job-index }}.log
      if: failure()

    - name: Upload inspect tarball
      uses: actions/upload-artifact@v2
      with:
        name: inspection-reports-aws
        path: ./inspection-report-${{ strategy.job-index }}.tar.gz
      if: failure()

    - name: Generate kubectl describe
      run: |
        set -eux
        mkdir describe-${{ strategy.job-index }}
        for resource in $(kubectl api-resources -o name | sort); do
          sudo kubectl describe $resource -A > describe-${{ strategy.job-index }}/"$resource".describe || true
        done
        tar -cvzf describe-${{ strategy.job-index }}.tar.gz describe-${{ strategy.job-index }}/*.describe
      if: failure()

    - name: Upload kubectl describe
      uses: actions/upload-artifact@v2
      with:
        name: kubectl-describe-aks
        path: describe-${{ strategy.job-index }}.tar.gz
      if: failure()

    - name: Generate kubeflow pod logs
      run: |
        set -eux
        mkdir stdout-${{ strategy.job-index }}
        for namespace in admin kubeflow; do
            for pod in $(kubectl get pods -n $namespace -o custom-columns=:metadata.name --no-headers); do
                for container in $(kubectl get pods -n $namespace -o jsonpath="{.spec.containers[*].name}" $pod); do
                  kubectl logs -n $namespace --timestamps $pod -c $container > stdout-${{ strategy.job-index }}/$namespace-$pod-$container.log
                done
            done
        done
        tar -cvzf stdout-${{ strategy.job-index }}.tar.gz stdout-${{ strategy.job-index }}/*.log
      if: failure()

    - name: Upload kubeflow pod logs
      uses: actions/upload-artifact@v2
      with:
        name: kubectl-stdout-aws
        path: stdout-${{ strategy.job-index }}.tar.gz
      if: failure()


    - name: Delete AKS
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az aks delete -g francecentral-resource-group --name test-aks-$GITHUB_RUN_ID --yes --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      if: always()
